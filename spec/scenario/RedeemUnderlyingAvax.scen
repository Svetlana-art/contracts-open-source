-- Redeem Tests

Test "Mint then Redeem All"
    NewComptroller
    ListedAvaxToken qiAVAX initialExchangeRate:0.005e9
    CallMintAvax Geoff 0.005e18 qiAVAX
    -- Check current affairs
    Assert Equal (Erc20 qiAVAX TokenBalance Geoff) 10e8
    Assert Equal (QiToken qiAVAX UnderlyingBalance Geoff) 0.005e18
    Invariant Static (QiToken qiAVAX ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Expect Changes (AvaxBalance Geoff) +0.005e18
    RedeemUnderlyingEth Geoff 0.005e18 qiAVAX
    Assert Equal (Erc20 qiAVAX TokenBalance Geoff) Zero
    Assert Equal (QiToken qiAVAX UnderlyingBalance Geoff) Zero

Test "Mint then Redeem Part"
    NewComptroller
    ListedAvaxToken qiAVAX initialExchangeRate:0.005e9
    CallMintAvax Geoff 0.005e18 qiAVAX
    -- Check current affairs
    Assert Equal (Erc20 qiAVAX TokenBalance Geoff) 10e8
    Assert Equal (QiToken qiAVAX UnderlyingBalance Geoff) 0.005e18
    Invariant Static (QiToken qiAVAX ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Expect Changes (AvaxBalance Geoff) +0.001e18
    RedeemUnderlyingEth Geoff 0.001e18 qiAVAX
    Assert Equal (Erc20 qiAVAX TokenBalance Geoff) 8e8
    Assert Equal (QiToken qiAVAX UnderlyingBalance Geoff) 0.004e18

Test "Mint then Redeem Too Much"
    NewComptroller
    ListedAvaxToken qiAVAX initialExchangeRate:0.005e9
    CallMintAvax Geoff 0.005e18 qiAVAX
    AllowFailures
    -- Check and hold static
    Invariant Static (QiToken qiAVAX ExchangeRateStored)
    Invariant Remains (Erc20 qiAVAX TokenBalance Geoff) 10e8
    Invariant Static (AvaxBalance Geoff)
    -- Now redeem after some time
    FastForward 2 Blocks
    RedeemUnderlyingEth Geoff 0.0055e18 qiAVAX
    -- TODO: This should really be REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, but based on
    -- the order of subtractions, total supply comes before account supply.
    Assert Failure MATH_ERROR REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED "3" -- TODO: This error is wrong

Test "Mint then Redeem Zero"
    NewComptroller
    ListedAvaxToken qiAVAX initialExchangeRate:0.005e9
    CallMintAvax Geoff 0.005e18 qiAVAX
    -- Check and hold static
    Invariant Static (QiToken qiAVAX ExchangeRateStored)
    Invariant Remains (Erc20 qiAVAX TokenBalance Geoff) 10e8
    Invariant Static (AvaxBalance Geoff)
    -- Now redeem after some time
    FastForward 2 Blocks
    RedeemUnderlyingEth Geoff 0e18 qiAVAX

Test "Mint then redeem with interest - no reserves"
    Invariant Success
    NewComptroller
    ListedAvaxToken qiAVAX initialExchangeRate:1e9
    Invariant Remains (QiToken qiAVAX Reserves) Zero
    CallMintAvax Geoff 50e18 qiAVAX
    Assert Equal (Erc20 qiAVAX TokenBalance Geoff) 500e8
    Assert Equal (QiToken qiAVAX UnderlyingBalance Geoff) 50e18
    Assert Equal (QiToken qiAVAX ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayEthWithInterest qiAVAX 10e18 5e18 interestRate:0.000001 blocks:500000
    -- We've accrued 10% interest for 5 blocks, or 50% of the amount,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   This is due pro-rata to all holders, but we just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 qiAVAX TokenBalance Geoff) 500e8
    Assert Equal (QiToken qiAVAX UnderlyingBalance Geoff) 55e18
    Assert Equal (QiToken qiAVAX ExchangeRate) 1.1e9
    -- Now redeem all with interest
    Expect Changes (AvaxBalance Geoff) 55e18
    RedeemUnderlyingEth Geoff 55e18 qiAVAX
    Assert Equal (AvaxBalance qiAVAX) 0e18
    Assert Equal (Erc20 qiAVAX TokenBalance Geoff) 0e8
    Assert Equal (QiToken qiAVAX UnderlyingBalance Geoff) 0e18
    Assert Equal (QiToken qiAVAX ExchangeRate) 1e9

Pending "Mint then redeem part with interest - no reserves"
    Invariant Success
    NewComptroller
    ListedQiToken ZRX qiAVAX initialExchangeRate:1e9
    Invariant Remains (QiToken qiAVAX Reserves) Zero
    Prep Geoff 50e18 ZRX qiAVAX
    Mint Geoff 50e18 qiAVAX
    Assert Equal (Erc20 qiAVAX TokenBalance Geoff) 500e8
    Assert Equal (QiToken qiAVAX UnderlyingBalance Geoff) 50e18
    Assert Equal (QiToken qiAVAX ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX qiAVAX 10e18 5e18 interestRate:0.000001 blocks:500000
    -- We've accrued 10% interest for 5 blocks, or 50% of the amount,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   This is due pro-rata to all holders, but we just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 qiAVAX TokenBalance Geoff) 500e8
    Assert Equal (QiToken qiAVAX UnderlyingBalance Geoff) 55e18
    Assert Equal (QiToken qiAVAX ExchangeRate) 1.1e9
    -- Now redeem all with interest
    Redeem Geoff 499e8 qiAVAX
    Assert Equal (Erc20 qiAVAX TokenBalance Geoff) 1e8
    Assert Equal (QiToken qiAVAX UnderlyingBalance Geoff) 0.11e18
    Assert Equal (QiToken qiAVAX ExchangeRate) 1.1e9

Pending "Mint then redeem with reserves and interest"
    Invariant Success
    NewComptroller
    ListedQiToken ZRX qiAVAX initialExchangeRate:1e9
    Prep Geoff 50e18 ZRX qiAVAX
    Mint Geoff 50e18 qiAVAX
    Assert Equal (Erc20 qiAVAX TokenBalance Geoff) 500e8
    Assert Equal (QiToken qiAVAX UnderlyingBalance Geoff) 50e18
    Assert Equal (QiToken qiAVAX ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX qiAVAX 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued 10% interest for 5 blocks, or 50% of the amount,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all holders. We just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 qiAVAX TokenBalance Geoff) 500e8
    Assert Equal (QiToken qiAVAX Reserves) 1e18
    Assert Equal (QiToken qiAVAX UnderlyingBalance Geoff) 54e18
    -- 55e18 + 0e18 - 1e18 / 500
    Assert Equal (QiToken qiAVAX ExchangeRate) 1.08e9
    -- Now redeem all with interest
    Redeem Geoff 500e8 qiAVAX
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 54e18
    Assert Equal (Erc20 ZRX TokenBalance qiAVAX) 1e18
    Assert Equal (Erc20 qiAVAX TokenBalance Geoff) 0e8
    Assert Equal (QiToken qiAVAX Reserves) 1e18
    Assert Equal (QiToken qiAVAX UnderlyingBalance Geoff) 0e18
    Assert Equal (QiToken qiAVAX ExchangeRate) 1e9

Test "Two users Mint, one redeems"
    NewComptroller
    ListedAvaxToken qiAVAX initialExchangeRate:0.005e9
    CallMintAvax Geoff 0.002e18 qiAVAX
    Assert Equal (Erc20 qiAVAX TokenBalance Geoff) 4e8
    Assert Equal (Erc20 qiAVAX TotalSupply) 4e8
    CallMintAvax Torrey 0.004e18 qiAVAX
    Assert Equal (Erc20 qiAVAX TokenBalance Geoff) 4e8
    Assert Equal (Erc20 qiAVAX TokenBalance Torrey) 8e8
    Assert Equal (Erc20 qiAVAX TotalSupply) 12e8
    RedeemUnderlyingEth Torrey 0.0015e18 qiAVAX
    Assert Equal (Erc20 qiAVAX TokenBalance Geoff) 4e8
    Assert Equal (Erc20 qiAVAX TokenBalance Torrey) 5e8
    Assert Equal (Erc20 qiAVAX TotalSupply) 9e8

Test "Mint then redeem 1 wei"
    NewComptroller
    ListedAvaxToken qiAVAX initialExchangeRate:0.005e9
    CallMintAvax Geoff 0.005e18 qiAVAX
    AllowFailures
    -- Check current affairs
    Assert Equal (Erc20 qiAVAX TokenBalance Geoff) 10e8
    Assert Equal (QiToken qiAVAX UnderlyingBalance Geoff) 0.005e18
    Invariant Static (QiToken qiAVAX ExchangeRateStored)
    Invariant Static (AvaxBalance Geoff)
    -- Now redeem after some time
    FastForward 2 Blocks
    RedeemUnderlyingEth Geoff 1 qiAVAX
    Assert Revert "revert redeemTokens zero"
